[tool.poetry]
name = "Packagebusters"
version = "0.0.1"
description = "Packagebusters"
readme = "README.md"
authors = ["Alexandr Lelikov <alexandr.s.lelikov@gmail.com>"]
classifiers = ["Programming Language :: Python :: 3.12"]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
pydantic = "^2.6.4"
uvicorn = "^0.23.2"
fastapi = "^0.110.0"
httpx = "^0.27.0"
fresh-bakery = "^0.3.3"
python-gitlab = "^4.4.0"
packaging = "^24.0"
jinja2 = "^3.1.3"
loguru = "^0.7.2"
pydantic-settings = "^2.4.0"

[tool.poetry.group.dev.dependencies]
black = "^24.3.0"
isort = "^5.13.2"
mypy = "^1.9.0"
pre-commit = "^3.7.0"
pylint = "^3.1.0"
pytest = "^8.1.1"
pytest-asyncio = "0.22.0"
pytest-cov = "^5.0.0"
bandit = "^1.7.8"
pytest-httpx = "^0.30.0"
pytest-mock = "^3.14.0"
ruff = "^0.3.4"
faker = "^24.4.0"
freezegun = "^1.4.0"
absolufy-imports = {git = "https://github.com/Lelikov/absolufy-imports.git"}

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
line-length = 120
target-version = ["py312"]
include = '\.pyi?$'
skip-string-normalization = true
exclude = '''
(
  /(
    | \.git
    | \.mypy_cache
    | \.venv
    | \.env
    | \.pytest_cache
  )/
)
'''

[tool.pydocstringformatter]
write = true
exclude = [".venv/*", ".git/*", ".mypy_cache/*", "chart-packagebusters/*", "values/*"]

[tool.isort]
line_length = 120
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
no_lines_before = ['STDLIB', 'LOCALFOLDER']
known_third_party = ["pytest"]
known_local_folder = []
multi_line_output = 3
include_trailing_comma = true
lines_after_imports = 2

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true
strict_optional = true
allow_redefinition = true
disallow_incomplete_defs = true


[tool.coverage]
[tool.coverage.run]
source = ['packagebusters']
omit = ['.venv/*']
[tool.coverage.report]
exclude_lines = [
  'pragma: no cover',
  'def __repr__',
  'if self\.debug',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'if __name__ == .__main__.:',
]

[tool.pylint]
[tool.pylint.master]
extension-pkg-whitelist = ["orjson", "pydantic", "asyncpg", "aioredis"]
ignore = "CVS"
ignore-patterns = ""
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
load-plugins="pylint.extensions.no_self_use"
[tool.pylint.messages_control]
max-line-length = 120
enable = ["c-extension-no-member"]
confidence = ""
disable = [
  "raw-checker-failed",
  "bad-inline-option",
  "locally-disabled",
  "file-ignored",
  "suppressed-message",
  "useless-suppression",
  "deprecated-pragma",
  "use-symbolic-message-instead",
  "too-few-public-methods",
  "logging-fstring-interpolation",
  "c-extension-no-member",
  "use-dict-literal",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
]
[tool.pylint.reports]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = "text"
reports = "no"
score = "yes"
[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = 'sys.exit'
[tool.pylint.logging]
logging-format-style = "old"
logging-modules = "logging"
[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-dict = [""]
spelling-ignore-words = [""]
spelling-private-dict-file = ""
spelling-store-unknown-words = "no"
[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]
[tool.pylint.typecheck]
contextmanager-decorators = "contextlib.contextmanager"
generated-members = [""]
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = [
  "optparse.Values",
  "thread._local",
  "_thread._local",
  "fake.Faker",
]
ignored-modules = ["faker"]
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1
[tool.pylint.variables]
additional-builtins = [""]
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
ignored-argument-names = '_.*|^ignored_|^unused_'
init-import = "no"
redefining-builtins-modules = [
  'six.moves',
  'past.builtins',
  'future.builtins',
  'builtins',
  'io',
]
[tool.pylint.format]
expected-line-ending-format = ""
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = 4
indent-string = "    "
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"
[tool.pylint.similarities]
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"
min-similarity-lines = 4
[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = "no"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
name-group = ""
no-docstring-rgx = '^_'
property-classes = 'abc.abstractproperty'
variable-naming-style = "snake_case"
[tool.pylint.string]
check-str-concat-over-line-jumps = "no"
[tool.pylint.imports]
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = ['optparse', 'tkinter.tix']
ext-import-graph = ""
import-graph = ""
int-import-graph = ""
known-standard-library = ""
known-third-party = ["enchant"]
[tool.pylint.classes]
defining-attr-methods = ['__init__', '__new__', 'setUp']
exclude-protected = ['_asdict', '_fields', '_replace', '_source', '_make']
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"
[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2
[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.bandit]
exclude_dirs = ["tests"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

[tool.ruff]
exclude = [
    ".git",
    ".mypy_cache",
    ".venv",
    ".env",
    ".pytest_cache",
]
fix = true
unsafe-fixes = true
show-fixes = true
target-version = "py312"
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = ["EM","FBT", "PLR", "TRY003", "D1", "D203", "D213", "FA", "ANN101", "ANN102", "S311", "INP001", "RET501", "TCH001", "TCH002","TCH003", "UP040", "ANN401", "ISC001", "COM812"]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*.py" = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN401",
    "S101",
    "PLR2004",
    "S311",
]

[tool.ruff.lint.isort]
no-lines-before = ["standard-library", "local-folder"]
known-third-party = []
known-local-folder = []
lines-after-imports = 2
